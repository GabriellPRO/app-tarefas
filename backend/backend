// backend/server.js
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
require("dotenv\config");

const app = express();
app.use(cors());
app.use(express.json());

// Rotas
const userRoutes = require("./routes/userRoutes");
const taskRoutes = require("./routes/taskRoutes");

app.use("/api/users", userRoutes);
app.use("/api/tasks", taskRoutes);

// Conectar ao MongoDB e iniciar servidor
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    console.log("Conectado ao MongoDB");
    app.listen(3000, () => console.log("Servidor rodando na porta 3000"));
  })
  .catch(err => console.error(err));


// backend/.env
// Crie esse arquivo na raiz da pasta backend
// Não colar no código, mas criar manualmente com o conteúdo:
// MONGO_URI=mongodb://localhost:27017/app_tarefas
// JWT_SECRET=sua_chave_secreta


// backend/models/User.js
const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
  nome: String,
  email: { type: String, unique: true },
  senha: String,
});

module.exports = mongoose.model("User", userSchema);


// backend/models/Task.js
const mongoose = require("mongoose");

const taskSchema = new mongoose.Schema({
  texto: String,
  concluida: Boolean,
  userId: String,
});

module.exports = mongoose.model("Task", taskSchema);


// backend/routes/userRoutes.js
const express = require("express");
const router = express.Router();
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

// Cadastro
router.post("/register", async (req, res) => {
  const { nome, email, senha } = req.body;
  try {
    const senhaHash = await bcrypt.hash(senha, 10);
    const novoUsuario = new User({ nome, email, senha: senhaHash });
    await novoUsuario.save();
    res.status(201).json({ msg: "Usuário criado com sucesso" });
  } catch (err) {
    res.status(400).json({ erro: "Erro ao registrar" });
  }
});

// Login
router.post("/login", async (req, res) => {
  const { email, senha } = req.body;
  try {
    const usuario = await User.findOne({ email });
    if (!usuario) return res.status(404).json({ erro: "Usuário não encontrado" });

    const senhaCorreta = await bcrypt.compare(senha, usuario.senha);
    if (!senhaCorreta) return res.status(401).json({ erro: "Senha incorreta" });

    const token = jwt.sign({ id: usuario._id }, process.env.JWT_SECRET);
    res.json({ token, nome: usuario.nome });
  } catch (err) {
    res.status(500).json({ erro: "Erro no login" });
  }
});

module.exports = router;


// backend/routes/taskRoutes.js
const express = require("express");
const router = express.Router();
const Task = require("../models/Task");
const jwt = require("jsonwebtoken");

// Middleware para verificar token
function auth(req, res, next) {
  const token = req.headers.authorization;
  if (!token) return res.status(401).json({ erro: "Token ausente" });
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.userId = decoded.id;
    next();
  } catch (err) {
    res.status(403).json({ erro: "Token inválido" });
  }
}

// Criar tarefa
router.post("/", auth, async (req, res) => {
  const { texto } = req.body;
  const nova = new Task({ texto, concluida: false, userId: req.userId });
  await nova.save();
  res.json(nova);
});

// Listar tarefas
router.get("/", auth, async (req, res) => {
  const tarefas = await Task.find({ userId: req.userId });
  res.json(tarefas);
});

// Atualizar tarefa
router.put("/:id", auth, async (req, res) => {
  const tarefa = await Task.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(tarefa);
});

// Deletar tarefa
router.delete("/:id", auth, async (req, res) => {
  await Task.findByIdAndDelete(req.params.id);
  res.json({ msg: "Tarefa deletada" });
});

module.exports = router;
